AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template deploy File Store functionality using AWS Lambda Function
  
Resources:
  ######################
  ##### FileStore #####
  ####################

  AgentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      FunctionName: file_store
      Handler: index.lambda_handler
      Role: !GetAtt AgentLambdaRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          # SPDX-License-Identifier: Apache-2.0
          import json
          import boto3
          import logging
          import os
          from botocore.config import Config

          session = boto3.session.Session()
          s3 = session.resource("s3", config=Config(read_timeout=600))

          log_level = os.environ.get("LOG_LEVEL", "INFO").strip().upper()
          logging.basicConfig(
              format="[%(asctime)s] p%(process)s {%(filename)s:%(lineno)d} %(levelname)s - %(message)s"
          )
          logger = logging.getLogger(__name__)
          logger.setLevel(log_level)

          FILE_STORAGE_FOLDER = "AGENT_FILE_STORE"
          FUNCTION_NAMES = ["save_file", "get_file"]


          def get_named_parameter(event, name):
              if event["parameters"]:
                  for item in event["parameters"]:
                      if item["name"] == name:
                          return item["value"]
              return None


          def save_file(bucket: str, file_name: str, contents: str, folder_name: str):
              logger.info(
                  f"Save file to S3, bucket: {bucket}, folder: {folder_name}, file: {file_name}, contents:\n{contents}"
              )

              response = s3.Object(
                  bucket, f"{FILE_STORAGE_FOLDER}/{folder_name}/{file_name}"
              ).put(Body=contents)

              logger.info(f"S3 response: {response}")
              return


          def get_file(bucket: str, file_name: str, folder_name: str) -> str:
              logger.info(
                  f"Get file from s3, bucket: {bucket}, folder: {folder_name}, file: {file_name}"
              )

              response = s3.Object(
                  bucket, f"{FILE_STORAGE_FOLDER}/{folder_name}/{file_name}"
              ).get()

              logger.info(f"S3 response status: {response['ResponseMetadata']['HTTPStatusCode']}")

              contents = response["Body"].read().decode("utf-8")
              return str(contents)


          def lambda_handler(event, context):
              logging.debug(f"{event=}")

              agent = event["agent"]
              actionGroup = event["actionGroup"]
              function = event["function"]
              parameters = event.get("parameters", [])
              session_id = event["sessionId"]
              responseBody = {"TEXT": {"body": "Error, no function was called"}}

              logger.info(f"{actionGroup=}, {function=}, {session_id=}")

              if function in FUNCTION_NAMES:
                  if function == "save_file":
                      contents = get_named_parameter(event, "contents")
                      bucket = get_named_parameter(event, "bucket")
                      file_name = get_named_parameter(event, "file_name")
                      folder_name = get_named_parameter(event, "folder_name")

                      if folder_name is None:
                          folder_name = session_id

                      if not contents:
                          responseBody = {
                              "TEXT": {"body": "Missing mandatory parameter: contents"}
                          }
                      elif not bucket:
                          responseBody = {"TEXT": {"body": "Missing mandatory parameter: bucket"}}
                      elif not file_name:
                          responseBody = {
                              "TEXT": {"body": "Missing mandatory parameter: file_name"}
                          }
                      else:

                          try:
                              save_file(bucket, file_name, contents, folder_name)
                              responseBody = {
                                  "TEXT": {
                                      "body": f"Stored contents to s3://{bucket}/{FILE_STORAGE_FOLDER}/{session_id}/{folder_name}. Contents were: {contents}"
                                  }
                              }
                          except Exception as e:
                              responseBody = {"TEXT": {"body": f"Error saving file: {e}"}}

                  elif function == "get_file":
                      bucket = get_named_parameter(event, "bucket")
                      file_name = get_named_parameter(event, "file_name")
                      folder_name = get_named_parameter(event, "folder_name")

                      if folder_name is None:
                          folder_name = session_id

                      if not bucket:
                          responseBody = {"TEXT": {"body": "Missing mandatory parameter: bucket"}}
                      elif not file_name:
                          responseBody = {
                              "TEXT": {"body": "Missing mandatory parameter: file_name"}
                          }
                      else:
                          contents = get_file(bucket, file_name, folder_name)
                          responseBody = {
                              "TEXT": {
                                  "body": f"Retrieved contents from s3://{bucket}/{FILE_STORAGE_FOLDER}/{folder_name}/{file_name}. Contents were: {contents}"
                              }
                          }
              else:
                  responseBody = {"TEXT": {"body": f"Invalid Function passed."}}

              action_response = {
                  "actionGroup": actionGroup,
                  "function": function,
                  "functionResponse": {"responseBody": responseBody},
              }

              function_response = {
                  "response": action_response,
                  "messageVersion": event["messageVersion"],
              }
              logger.debug(f"lambda_handler: {function_response=}")

              return function_response



  AgentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ListBucketWithPrefix
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::*
                Condition:
                  StringLike:
                    s3:prefix:
                      - AGENT_FILE_STORE/*
                      - CODE_INTERP_FILE_STORE/*
        - PolicyName: ReadWriteBucketWithPrefix
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::*/AGENT_FILE_STORE/*
                  - arn:aws:s3:::*/CODE_INTERP_FILE_STORE/*

  AgentAliasLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AgentLambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*

  AgentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AgentLambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*


Outputs:
 FileStoreLambdaFunction:
    Value: !Ref AgentLambdaFunction